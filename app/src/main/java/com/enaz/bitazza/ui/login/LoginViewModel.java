package com.enaz.bitazza.ui.login;import android.util.Log;import androidx.lifecycle.ViewModel;import com.enaz.bitazza.BuildConfig;import com.enaz.bitazza.client.LoginRepository;import com.enaz.bitazza.socket.SSSocketHandler;import com.enaz.bitazza.socket.WebSocketOnSubscribe;import org.json.JSONException;import org.json.JSONObject;import java.util.concurrent.TimeUnit;import javax.inject.Inject;import io.reactivex.disposables.CompositeDisposable;import okhttp3.OkHttpClient;import okhttp3.Request;import okhttp3.WebSocket;public class LoginViewModel extends ViewModel {    private CompositeDisposable disposable;    private LoginRepository loginRepository;    private OkHttpClient okHttpClient;    private WebSocket webSocket;    @Inject    public LoginViewModel(OkHttpClient okHttpClient, LoginRepository loginRepository) {        disposable = new CompositeDisposable();        this.okHttpClient = okHttpClient;        this.loginRepository = loginRepository;        connectSocket();    }    private void connectSocket() {        Request request = new Request.Builder().url(BuildConfig.WEB_SOCKET_URL).build();        WebSocketOnSubscribe listener = new WebSocketOnSubscribe();        webSocket = okHttpClient.newWebSocket(request, listener);        okHttpClient.dispatcher().executorService().shutdown();    }    public void authenticate() {        //Send here        webSocket.send("");//        loginRepository.authenticate("eduardo.delito@gmail.com", "Android!1").enqueue(new Callback<Authenticate>() {//            @Override//            public void onResponse(Call<Authenticate> call, Response<Authenticate> response) {//                System.out.println(response.isSuccessful()+"=========="+response.body());//            }////            @Override//            public void onFailure(Call<Authenticate> call, Throwable t) {//                System.out.println("onFailure=========="+t.getMessage());//            }//        });    }    @Override    protected void onCleared() {        super.onCleared();        if (disposable != null) {            disposable.clear();            disposable = null;        }    }}